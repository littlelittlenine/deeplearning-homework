# Form implementation generated from reading ui file 'd:\deep learning\deep learning experiment\select.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import subprocess
import case

class HoverButton(QtWidgets.QPushButton):# Move the mouse over the button and the button becomes larger
    def __init__(self, text, parent=None):
        super().__init__(text, parent)
        self.setMouseTracking(True)  # Enable mouse tracking
        self.hovered = False
    def paintEvent(self, event):
        if not self.hovered:
            self.default_size = self.size()
        return super().paintEvent(event)

    def enterEvent(self, event):
        self.hovered = True
        self.resize(self.calculate_hover_size())

    def leaveEvent(self, event):
        self.hovered = False
        self.resize(self.default_size)

    def calculate_hover_size(self):
        return QtCore.QSize(int(self.default_size.width() * 1.2),
                            int(self.default_size.height() * 1.2))


class SubWindow(QtWidgets.QDialog):#Sub-interface
    def __init__(self, class_ui, parent=None):
        super().__init__(parent)

        self.setWindowTitle("Sub Window")
        self.setStyleSheet("background-color: rgb(255, 216, 216);")
        self.resize(300, 200)
        self.class_ui = class_ui

        layout = QtWidgets.QVBoxLayout(self)

        self.button1 = HoverButton("打开文件", self)
        self.button1.setStyleSheet("background-color: rgb(255, 118, 118);border-radius: 10px;")
        layout.addWidget(self.button1)
        self.button1.clicked.connect(class_ui.open_file)

        self.button2 = HoverButton("文献类型归纳", self)
        self.button2.setStyleSheet("background-color: rgb(255, 118, 118);border-radius: 10px;")
        layout.addWidget(self.button2)
        self.button2.clicked.connect(class_ui.create_map2)

        self.button3 = HoverButton("出版日期归纳", self)
        self.button3.setStyleSheet("background-color: rgb(255, 118, 118);border-radius: 10px;")
        layout.addWidget(self.button3)
        self.button3.clicked.connect(class_ui.create_map1)


class Ui_MainWindow(object):#Main page
    def __init__(self, search_term_top, search_term_bottom):
        self.search_term_top = ""
        self.search_term_bottom = ""
        self.class_ui = None
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(673, 429)
        MainWindow.setStyleSheet("background-color: rgb(255, 216, 216);\n"
                                 "border-radius: 10px")
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.textEdit = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(220, 60, 251, 41))
        self.textEdit.setStyleSheet("alternate-background-color: rgb(255, 255, 255);\n"
                                     "background-color: rgb(0, 0, 0);\n"
                                     "background-color: rgb(255, 255, 255);")
        self.textEdit.setObjectName("textEdit")

        self.commandLinkButton = HoverButton("搜索", parent=self.centralwidget)
        self.commandLinkButton.setGeometry(QtCore.QRect(470, 60, 41, 41))
        self.commandLinkButton.setStyleSheet("background-color: rgb(255, 118, 118);")
        self.commandLinkButton.setObjectName("commandLinkButton")

        self.lineEdit_top = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.lineEdit_top.setGeometry(QtCore.QRect(220, 60, 251, 31))
        self.lineEdit_top.setMinimumSize(QtCore.QSize(10, 10))
        self.lineEdit_top.setStyleSheet("background-color: rgb(255, 177, 177);")
        self.lineEdit_top.setObjectName("lineEdit_top")

        self.lineEdit_bottom = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.lineEdit_bottom.setGeometry(QtCore.QRect(220, 110, 251, 31))
        self.lineEdit_bottom.setMinimumSize(QtCore.QSize(10, 10))
        self.lineEdit_bottom.setStyleSheet("background-color: rgb(255, 177, 177);")
        self.lineEdit_bottom.setObjectName("lineEdit_bottom")

        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 150, 661, 261))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("d:\\deep learning\\deep learning experiment\\../../360MoveData/Users/keven/Desktop/微信图片_20231013003546.png").scaledToHeight(200))
        self.label.setObjectName("label")

        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(0, 0, 81, 71))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("d:\\deep learning\\deep learning experiment\\../../360MoveData/Users/keven/Desktop/微信图片_20231013004308.png"))
        self.label_2.setObjectName("label_2")

        self.textEdit.raise_()
        self.lineEdit_top.raise_()
        self.lineEdit_bottom.raise_()
        self.commandLinkButton.raise_()
        self.label.raise_()
        self.label_2.raise_()

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 673, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.commandLinkButton.clicked.connect(self.show_sub_window)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

    def show_sub_window(self):
        self.search_term_top = self.lineEdit_top.text()  # Get the text content of LineEdit, where the input is the scientist you want to search for
        self.search_term_bottom = self.lineEdit_bottom.text()  # Get the text content of LineEdit, where the content is the address where the file is to be installed
        print(self.search_term_top)
        print(self.search_term_bottom)
        self.class_ui = case.DocumentSearch(self.search_term_top,self.search_term_bottom)
        self.class_ui.search_literature()
        self.sub_window = SubWindow(self.class_ui)
        self.sub_window.exec()


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()

    ui = Ui_MainWindow("hello", "world")
    ui.setupUi(MainWindow)

    MainWindow.show()
    sys.exit(app.exec())
